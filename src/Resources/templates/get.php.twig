/**
 {% if property.documentation -%}
 {% perline %}
 * {{ property.documentation | raw}}
 {% endperline %}
 {% else -%}
 * {{  property.type == 'boolean' ? 'Is' : 'Get' }} {{ property.name }}
 {% endif -%}
 *
 {% if property.collection -%}
 * @return {{ property.fullyQualifiedType }}[]
 * @return \Hostnet\Component\AccessorGenerator\Collection\ConstCollectionInterface
 {% else -%}
 * @return {{ property.isComplexType ? property.typeHint : property.type}}{{ not property.willGenerateStrict ? '|null' }}
 {% endif -%}
 * @throws \InvalidArgumentException
 */
public function {{ getter }}()
{
    if (func_num_args() > 0) {
        throw new \BadMethodCallException(
            sprintf(
                '{{ getter }}() has no arguments but %d given.',
                func_num_args()
            )
        );
    }
{% if not property.isComplexType  or property.typeHint == '\\DateTime' %}
{% if property.willGenerateStrict and not property.isNullable %}
    if ($this->{{ property.name }} === null) {
        throw new \LogicException(sprintf(
            'Property {{ property.name }} is null, but the column is not nullable, '.
            'make sure your object is initialized in such a way the properties are in '.
            'a valid state, for example by using a proper constructor. If you want to ' .
            'test if an object is new for the database please consult the UnitOfWork.' .
            'It could also be that your column in code is set tot not nullable and in' .
            'and contains null values in the database'
        ));
    }
{% endif %}
{% if (not property.willGenerateStrict or property.isNullable) %}

    if ($this->{{ property.name }} === null) {
        return null;
    }
{% endif %}
{% endif %}
{% if property.type == 'integer' %}

    {% perline %}
    {% include 'integer.php.twig' with {'skip_check_type' : true, 'var' : '$this->' ~ property.name }%}
    {% endperline %}
{% endif -%}
{% if property.collection %}

    if ($this->{{ property.name }} === null) {
        $this->{{ property.name }} = new \Doctrine\Common\Collections\ArrayCollection();
    }
{% elseif property.willGenerateStrict and property.isComplexType and not property.isNullable and property.type != '\\DateTime' %}

    if ($this->{{ property.name }} === null) {
        throw new \Doctrine\ORM\EntityNotFoundException('Missing required property "{{ property.name }}".');
    }
{% endif %}

{% if property.type == 'integer' %}
    return (int) $this->{{ property.name }};
{% elseif property.collection %}
    return new ImmutableCollection($this->{{ property.name }});
{% else %}
    return $this->{{ property.name }};
{% endif %}
}

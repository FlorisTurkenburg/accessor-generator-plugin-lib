/**
 {% if property.documentation -%}
 {% perline %}
 * {{ property.documentation }}
 {% endperline %}
 {% else -%}
 * Add {{ property.name | singularize }}
 {% endif -%}
 *
 * @param {{ property.type }} ${{ property.name | singularize }}
 * @return {{ property.class }}
 * @throws \BadMethodCallException if the number of arguments is not correct
 */
{{ property.willGenerateSet ? 'public' : 'private' }} function add{{ property.name | singularize | classify }}({{ property.type }} ${{ property.name | singularize }})
{
    if (func_num_args() != 1) {
        throw new \BadMethodCallException(
            sprintf(
                'add{{ property.name | classify }}() has one argument but %d given.',
                func_num_args()
            )
        );
    }

    if ($this->{{ property.name}} === null) {
        $this->{{ property.name}} = new \Doctrine\Common\Collections\ArrayCollection();
    } elseif ($this->{{ property.name}}->contains(${{ property.name | singularize }})) {
        return $this;
    }

    $this->{{ property.name}}->add(${{ property.name | singularize }});
{% if property.referencedProperty %}
    $method = new \ReflectionMethod(${{ property.name | singularize }}, '
    {{- property.isReferencingCollection ? 'add' : 'set' }}
    {{- property.referencedProperty | classify | singularize }}');
    $method->setAccessible(true);
    $method->invoke(${{ property.name | singularize }}, $this);
    $method->setAccessible(false);
{% endif %}
    return $this;
}

/**
 {% if property.documentation -%}
 {% perline %}
 * {{ property.documentation }}
 {% endperline %}
 {% else -%}
 * Add {{ property.name | singularize }}
 {% endif -%}
 *
 * @param {{ property.typeHint}} ${{ property.name | singularize }}
 * @return {{ property.class }}
 * @throws \BadMethodCallException if the number of arguments is not correct
 */
public function add{{ property.name | singularize | classify }}({{ property.typeHint }} ${{ property.name | singularize }})
{
    if (func_num_args() != 1) {
        throw new \BadMethodCallException(
            sprintf(
                'add{{ property.name | classify }}() has one argument but %d given.',
                func_num_args()
            )
        );
    }

    if ($this->{{ property.name}} === null) {
        $this->{{ property.name}} = new \Doctrine\Common\Collections\ArrayCollection();
    } elseif ($this->{{ property.name}}->contains(${{ property.name | singularize }})) {
        return $this;
    }

    $this->{{ property.name}}->add(${{ property.name | singularize }});
{% if property.referencedProperty %}
    $property = new \ReflectionProperty({{ property.type }}::class, '{{ property.referencedProperty }}');
    $property->setAccessible(true);
{% if property.isReferencingCollection %}
    $collection = $property->getValue(${{ property.name | singularize }});
    if (!$collection) {
        $collection = new \Doctrine\Common\Collections\ArrayCollection();
        $property->setValue(${{ property.name | singularize }}, $collection);
    }
    $collection->add($this);
{% else %}
    $value = $property->getValue(${{ property.name | singularize }});
    if ($value && $value !== $this) {
        throw new \LogicException('{{ property.name | singularize | classify }} can not be added to more than one {{ property.class }}.');
    }
    $property->setValue(${{ property.name | singularize }}, $this);
{% endif %}
    $property->setAccessible(false);
{% endif %}
    return $this;
}

/**
 {% if property.documentation -%}
 {% perline %}
 * {{ property.documentation }}
 {% endperline %}
 {% else -%}
 * Set {{ property.name }}
 {% endif -%}
 *
 * @param {{ property.type }} ${{ property.name }}
 * @return $this
 * @throws \BadMethodCallException if the number of arguments is not correct
 {% if not property.type starts with '\\' -%}
 * @throws \InvalidArgumentException if value is not of the right type
 {% endif -%}
 {% if property.type == 'integer' -%}
 * @throws \DomainException if the intger value is outside of the domain on this machine
 {% endif -%}
 {% if property.length -%}
 * @throws \LengthException if the length of the value is to long
 {% endif -%}
 */
public function set{{ property.name | classify }}({{ property.type starts with '\\' ?  property.type ~ ' '}}${{ property.name }})
{
    if (func_num_args() != 1) {
        throw new \BadMethodCallException(
            sprintf(
                'set{{ property.name | classify }}() has one argument but %d given.',
                func_num_args()
            )
        );
    }

    {# scalar or build-in type (integer, float, string, array, object, resource) -#}
    {% if not property.type starts with '\\' %}
    {% if property.type == 'integer' %}
    if (!is_int(${{ property.name }}) {
        if ((int)${{ property.name }} !== 1 * ${{ property.name }}) {
            if (is_float(1 * ${{ property.name }})) {
                throw new \DomainException('Parameter \'${{ name }}\' is too big for the interger domain [' . PHP_INT_MIN . ',' PHP_INT_MAX ']');
            } else {
                throw new \InvalidArgumentException('Parameter \'${{ name }}\' must be compatible with \'integer\'.');
            }
        }
    }
    {% elseif property.type == 'float' %}
    {% endif %}
    {% endif %}
    {% if property.length %}

    if (strlen(${{ property.name }} > {{ property.length }})) {
        throw new \LengthException('Parameter \'${{ property.name }}\' should not be longer than {{ property.length }} characters.');
    }
    {% endif %}

    return $this;
}

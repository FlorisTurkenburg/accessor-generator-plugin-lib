/**
 {% if property.documentation -%}
 {% perline %}
 * {{ property.documentation }}
 {% endperline %}
 {% else -%}
 * Set {{ property.name }}
 {% endif -%}
 *
 {% if default != property.default -%}
 * Generated a default null value because the doctrine column is nullable.
 * Still require an explicit argument to set the column. If you do not like
 * this message, specify a default value or use JoinColumn(nullable=false).
 *
 {% endif -%}
 * @param {{ property.type }} ${{ property.name }}
 {% if property.isFixedPointNumber -%}
 * @param bool %round round the number fit in the precision and scale (round away from zero)
 {% endif -%}
 * @return {{ property.class }}
 * @throws \BadMethodCallException if the number of arguments is not correct
 {% if not property.isComplexType -%}
 * @throws \InvalidArgumentException if value is not of the right type
 {% endif -%}
 {% if property.type == 'integer' -%}
 * @throws \DomainException if the intger value is outside of the domain on this machine
 {% endif -%}
 {% if property.length -%}
 * @throws \LengthException if the length of the value is to long
 {% endif -%}
 {% if not property.willGenerateSet -%}
 * @throws \LogicException if the association constraints are violated
 * @access friends with {{ property.type }}
 {% endif -%}
 */
{{ property.willGenerateSet ? 'public' : 'private' }} function set{{ property.name | classify }}(
    {{- property.isComplexType ? property.type ~ ' '-}}
    ${{ property.name -}}
    {%- if default %} = {{ default | raw }}{% endif %}
    {%- if property.isFixedPointNumber -%}
    , $round = false
    {%- endif -%}
)
{
{% if default and property.isFixedPointNumber %}
    if (func_num_args() > 2) {
        throw new \BadMethodCallException(
            sprintf(
                'set{{ property.name | classify }}() has two optional arguments but %d given.',
                func_num_args()
            )
        );
    }
{% elseif default %}
    if (func_num_args() > 1) {
        throw new \BadMethodCallException(
            sprintf(
                'set{{ property.name | classify }}() has one optional argument but %d given.',
                func_num_args()
            )
        );
    }
{% elseif property.isFixedPointNumber %}
    if (func_num_args() > 2) {
        throw new \BadMethodCallException(
            sprintf(
                'set{{ property.name | classify }}() has one obligatory and one optional argument but %d given.',
                func_num_args()
            )
        );
    }
{% else %}
    if (func_num_args() != 1) {
        throw new \BadMethodCallException(
            sprintf(
                'set{{ property.name | classify }}() has one argument but %d given.',
                func_num_args()
            )
        );
    }
{% endif %}
{# scalar or build-in type (integer, float, string, array, object, resource) #}
{%- if not property.isComplexType %}
{% if property.isNullable %}

    if (${{ property.name }} === null) {
        $this->{{ property.name }} = ${{ property.name }};
        return $this;
    }
{% endif %}
{% if property.type == 'integer' %}

    {% perline %}
    {% include 'integer.php.twig' with {'skip_check_type' : false, 'var' : '$' ~ property.name }%}
    {% endperline %}
{% elseif property.isFixedPointNumber %}

    {% perline %}
    {% include 'decimal.php.twig' %}
    {% endperline %}
{% elseif property.type == 'string' %}

    if (${{ property.name }} === null
        || is_scalar(${{ property.name }})
        || is_callable([${{ property.name }}, '__toString'])
    ) {
        ${{ property.name }} = (string)${{ property.name }};
    } else {
        throw new \InvalidArgumentException(
            'Parameter {{ property.name }} must be convertable to string.'
        );
    }
{% else %}

    if (!is_{{ property.type == 'boolean' ? 'bool' : property.type }}(${{ property.name }})) {
        throw new \InvalidArgumentException(
            'Parameter {{ property.name }} must be {{ property.type }}.'
        );
    }
{% endif %}
{% endif %}
{%- if property.length %}

    if (strlen(${{ property.name }}) > {{ property.length }}) {
        throw new \LengthException('Parameter \'${{ property.name }}\' should not be longer than {{ property.length }} characters.');
    }
{% endif %}
{%- if not property.willGenerateSet and property.isReferencingCollection %}

    if (${{ property.name }} && ! ${{ property.name }}->get{{ property.referencedProperty | classify}}()->contains($this)) {
        throw new \LogicException('Please use {{ property.name | classify}}::add{{ property.referencedProperty | singularize | classify }}().');
    } elseif (${{ property.name }} && $this->{{ property.name }}) {
        throw new \LogicException('{{ property.class }} objects can not be added to more than one {{ property.type }}.');
    }
{% endif %}
{%- if property.referencedProperty and not property.isReferencingCollection %}
    if (${{ property.name }} !== null && $this->{{ property.name }} !== ${{ property.name }}) {
        $this->{{ property.name }} = ${{ property.name }};

        $method = new \ReflectionMethod(${{ property.name }}, 'set{{ property.referencedProperty | classify}}');
        $method->setAccessible(true);
        $method->invoke(${{ property.name }}, $this);
        $method->setAccessible(false);
    }
{% else %}

    $this->{{ property.name }} = ${{ property.name }};
{% endif %}
    return $this;
}
